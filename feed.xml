<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://snmhz.github.io/</id><title>Archive</title><subtitle>"아카이브"</subtitle> <updated>2025-06-19T01:03:48+09:00</updated> <author> <name>SNMHZ</name> <uri>https://snmhz.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://snmhz.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://snmhz.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 SNMHZ </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Pydantic RootModel의 설계 의도와 v2에서의 올바른 타입 매핑</title><link href="https://snmhz.github.io/posts/pydantic-rootmodel-design-philosophy/" rel="alternate" type="text/html" title="Pydantic RootModel의 설계 의도와 v2에서의 올바른 타입 매핑" /><published>2025-06-19T00:00:00+09:00</published> <updated>2025-06-19T00:00:00+09:00</updated> <id>https://snmhz.github.io/posts/pydantic-rootmodel-design-philosophy/</id> <content src="https://snmhz.github.io/posts/pydantic-rootmodel-design-philosophy/" /> <author> <name>SNMHZ</name> </author> <category term="Tech" /> <category term="Python" /> <summary> 서론 Pydantic은 Python에서 데이터 검증과 설정 관리를 위한 핵심 라이브러리로 자리잡았습니다. 그 중에서도 RootModel(또는 v1의 __root__ 필드)은 특별한 용도로 설계된 기능입니다. 하지만 많은 개발자들이 이 기능을 자동 타입 매핑 용도로 활용하면서, v2에서의 변경사항과 함께 혼란이 생겨났습니다. 이 글에서는 RootModel의 본래 설계 의도부터 실제 사용 패턴, 그리고 v2에서의 변화와 권장되는 구현 방법까지 체계적으로 다루어보겠습니다. 목차 1. RootModel의 원래 설계 의도 2. 자동 타입 매핑의 부수적 활용 3. Pydantic v2에서의 변화 4. v2에서 권장되는 자동 타입 매핑 방법 5. v1/v2 호환 코드 작성 전략 ... </summary> </entry> <entry><title>NumPy 1.24 이후 np.float 타입 제거 및 대응 전략</title><link href="https://snmhz.github.io/posts/numpy-float-deprecation/" rel="alternate" type="text/html" title="NumPy 1.24 이후 np.float 타입 제거 및 대응 전략" /><published>2025-06-06T00:00:00+09:00</published> <updated>2025-06-06T00:00:00+09:00</updated> <id>https://snmhz.github.io/posts/numpy-float-deprecation/</id> <content src="https://snmhz.github.io/posts/numpy-float-deprecation/" /> <author> <name>SNMHZ</name> </author> <category term="Tech" /> <category term="Python" /> <summary> NumPy를 사용하다 보면 가끔 예상치 못한 버전 업데이트 변경점에 당황할 때가 있습니다. NumPy 1.24 버전에서 np.float와 같은 일부 타입들이 완전히 제거된 것이 바로 그런 경우입니다. 많은 기존 코드에 영향을 줄 수 있는 이 변화는 사실 NumPy의 타입 시스템을 더 명확하게 만들고, 오랜 기간 존재했던 혼란을 해결하기 위한 중요한 발전입니다. 이번 글에서는 이 변화가 왜 필요했는지, 그리고 우리의 코드를 어떻게 수정해야 하는지 구체적인 전략을 알아보겠습니다. np.float는 왜 사라졌을까? 결론부터 말하면, np.float가 혼란의 주범이었기 때문입니다. 정체성의 혼란 np.float의 정체는 사실 Python 내장 float의 또 다른 이름(alias) 이었습니다.... </summary> </entry> <entry><title>Airflow DAG 파싱 주기 설정 시 주의할 점과 최적화 전략</title><link href="https://snmhz.github.io/posts/airflow-dag-parsing-optimization/" rel="alternate" type="text/html" title="Airflow DAG 파싱 주기 설정 시 주의할 점과 최적화 전략" /><published>2025-05-24T00:00:00+09:00</published> <updated>2025-06-06T21:08:26+09:00</updated> <id>https://snmhz.github.io/posts/airflow-dag-parsing-optimization/</id> <content src="https://snmhz.github.io/posts/airflow-dag-parsing-optimization/" /> <author> <name>SNMHZ</name> </author> <category term="Tech" /> <category term="Airflow" /> <summary> 서론 Airflow를 운영하다 보면 DAG 변경사항이 언제 반영되는지 답답할 때가 많습니다. 파일을 수정했는데 UI에서 바로 확인이 안 되고, “도대체 언제 반영되는 거야?” 싶어 F5를 연타한 경험, 다들 있으실 거예요. 저도 처음에는 단순히 “파싱 주기만 짧게 하면 되겠지”라고 생각했는데, 무작정 적용했다가는 또 다른 문제가 터질 수 있습니다. 오늘은 실무에서 겪었던 파싱 주기 설정 시 주의할 점들과 나름대로 찾아낸 최적화 팁들을 공유해보려고 합니다. 목차 1. Airflow DAG 파싱 과정 이해하기 2. 주요 옵션별 역할과 동작 방식 3. 왜 파싱만으로는 의미가 없는가? 4. 설정 시 주의점 &amp;amp; 권장 전략 5. 결론 및 개인적인 소감 1. Airf... </summary> </entry> <entry><title>git 브랜치명에 언더바를 잘 안 쓰는 이유</title><link href="https://snmhz.github.io/posts/git-branch-naming-without-underscore/" rel="alternate" type="text/html" title="git 브랜치명에 언더바를 잘 안 쓰는 이유" /><published>2025-05-18T00:00:00+09:00</published> <updated>2025-05-18T20:10:33+09:00</updated> <id>https://snmhz.github.io/posts/git-branch-naming-without-underscore/</id> <content src="https://snmhz.github.io/posts/git-branch-naming-without-underscore/" /> <author> <name>SNMHZ</name> </author> <category term="Tech" /> <category term="git" /> <summary> Git을 사용하다 보면 브랜치명을 어떻게 지어야 할지 고민하는 경우가 많습니다. 특히 브랜치명에서 단어를 구분할 때 하이픈-과 언더바_ 중 무엇을 써야 할지 고민이 되는데, 실제로 오픈소스 프로젝트나 실무에서는 하이픈-을 압도적으로 많이 사용하고, 언더바_는 거의 사용하지 않습니다. 이번 글에서는 왜 git 브랜치명에 언더바를 잘 안 쓰는지, 그리고 이런 관례가 어떻게 자리잡게 되었는지 살펴보고, 마지막으로 오픈소스 프로젝트에서 널리 쓰이는 브랜치 네이밍 컨벤션까지 정리해보겠습니다. 왜 언더바(_)를 잘 안 쓸까? 1. 관례(Convention)의 힘 사실 기술적으로 git 브랜치명에는 하이픈-과 언더바_ 모두 사용할 수 있습니다. 하지만 하이픈-을 쓰는 것이 업계 표준처럼 자리잡은 가... </summary> </entry> <entry><title>파이썬 개발자가 가져야 할 자세</title><link href="https://snmhz.github.io/posts/python-keeps-you-on-your-toes/" rel="alternate" type="text/html" title="파이썬 개발자가 가져야 할 자세" /><published>2025-05-17T00:00:00+09:00</published> <updated>2025-06-06T20:32:37+09:00</updated> <id>https://snmhz.github.io/posts/python-keeps-you-on-your-toes/</id> <content src="https://snmhz.github.io/posts/python-keeps-you-on-your-toes/" /> <author> <name>SNMHZ</name> </author> <category term="Tech" /> <category term="Python" /> <summary> 서론 파이썬은 지속적으로 발전하는 프로그래밍 언어로, 버전 업그레이드마다 새로운 기능과 변경사항이 도입됩니다. 이러한 변화는 기존 코드의 동작에 대한 영향을 매우 크게 강요하는 경우도 꽤나 흔합니다. 특히 이전 글에서 설명한 Python 3.11에서 str과 Enum의 동작 변경은 많은 개발자들에게 주의가 필요한 단적인 예시입니다. 목차 1. 파이썬의 지속적인 변화와 대응 2. 개발자의 준비 자세 3. 파이썬의 설계 철학 이해하기 4. 호환성 관리 전략 5. 그래서 파이썬 말고 다른 대안이 있는가? 1. 파이썬의 지속적인 변화와 대응 파이썬은 하위 호환성을 중요시하면서도, 때로는 언어의 명확성과 개선을 위해 기존 동작을 변경하기도 합니다. 이러한 변화는 개발자들에게 ... </summary> </entry> </feed>
